name: Stakgraph Standalone Test
on:
  pull_request:
    branches:
      - main

jobs:
  run-standalone-integration-test:
    runs-on: ubuntu-latest
    name: Run standalone integration tests
    steps:
      - name: Enable docker.host.internal for Ubuntu
        run: |
          pwd && sudo bash -c 'echo "172.17.0.1 host.docker.internal" >> /etc/hosts'

      - name: Checkout from Github
        uses: actions/checkout@v4

      - name: Give Permission
        working-directory: ./mcp
        run: |
          mkdir -p ./.neo4j/plugins
          sudo chown -R 1000:1000 ./.neo4j/plugins
          sudo chmod -R 777 ./.neo4j/plugins  
          sudo chmod -R 777 ./conf

      - name: Run Neo4j
        working-directory: ./mcp
        run: docker compose -f neo4j.yaml up -d

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.1"

      - name: Verify Go Installation
        run: go version

      - name: Install gopls
        run: go install golang.org/x/tools/gopls@latest

      - name: Verify gopls Installation
        run: |
          echo "$HOME/go/bin" >> $GITHUB_PATH
          gopls version

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Verify Node.js Installation
        run: node -v

      - name: Install TypeScript and TypeScript LSP
        run: |
          npm install -g typescript typescript-language-server
          echo "$HOME/.npm-global/bin" >> $GITHUB_PATH

      - name: Verify TypeScript Installation
        run: |
          tsc --version
          typescript-language-server --version

      - name: Wait for Neo4j to be Ready
        run: |
          echo "Waiting for Neo4j to be healthy..."
          timeout 300s sh -c '
          until docker inspect --format "{{json .State.Health.Status }}" neo4j.sphinx | grep -q "healthy"; do
            echo "Neo4j is not ready yet..."
            sleep 10
          done'
          echo "Neo4j is healthy!"

      - name: Start Rust Standalone Server
        run: |
          export NEO4J_URI="bolt://localhost:7687"
          export NEO4J_USER="neo4j"
          export NEO4J_PASSWORD="testtest"
          export PORT="7777"
          cargo run --bin standalone --features neo4j > standalone.log 2>&1 &
          echo $! > standalone.pid

      - name: Wait for Rust server
        run: |
          tail -n +1 -f standalone.log &
          npx wait-on http://localhost:7777 -t 120000

      - name: Test server is responding
        run: |
          curl -f http://localhost:7777/clear || (echo "Server not responding" && exit 1)

      - name: Run Graph Update Tests
        run: |
          cargo test --features neo4j test_graph_update --verbose

      # other tests to be added here

      - name: Cleanup
        if: always()
        run: |
          if [ -f standalone.pid ]; then
            kill $(cat standalone.pid) || true
          fi
          docker compose -f ./mcp/neo4j.yaml down
