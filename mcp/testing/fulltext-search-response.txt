<snippet>
name: Function: NewRouter
ref_id: test_ref_id
file: stakwork/demo-repo/routes.go
start: 17, end: 41
```
func NewRouter() *http.Server {
	r := initChi()

	r.Group(func(r chi.Router) {
		r.Get("/person/{id}", GetPerson)
		r.Post("/person", CreatePerson)
		r.Get("/people", GetPeople)
	})

	PORT := os.Getenv("PORT")
	if PORT == "" {
		PORT = "5002"
	}

	server := &http.Server{Addr: ":" + PORT, Handler: r}

	go func() {
		fmt.Printf("Listening on port %s\n", PORT)
		if err := server.ListenAndServe(); err != nil {
			fmt.Printf("server err: %s\n", err.Error())
		}
	}()

	return server
}
```
</snippet>
<snippet>
name: Function: main
ref_id: test_ref_id
file: stakwork/demo-repo/main.go
start: 14, end: 30
```
func main() {
	fmt.Println("Hello, World!")
	InitDB()

	router := NewRouter()

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(people)
}

func initChi() *chi.Mux {
	r := chi.NewRouter()
	r.Use(middleware.RequestID)
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	cors := cors.New(cors.Options{
		AllowedOrigins:   []string{"*"},
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token", "X-User", "authorization", "x-jwt", "Referer", "User-Agent", "x-session-id"},
		AllowCredentials: true,
		MaxAge:           300,
	})
	r.Use(cors.Handler)
	r.Use(middleware.Timeout(60 * time.Second))
	return r
}

```
</snippet>